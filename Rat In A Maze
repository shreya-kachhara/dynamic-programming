#include <bits/stdc++.h> 

bool safe(int newx, int newy, vector < vector < int >> & arr, vector<vector<bool>> &visited, int n){
    if(newx>=0 && newx<n && newy>=0 && newy<n && visited[newx][newy]!=1 && arr[newx][newy]==1){
        return true;
    }
    else
    return false;
}

void solve(int x, int y, vector < vector < int >> & arr, int n, vector<string> &ans, vector<vector<bool>> &visited, string path){
    if(x==n-1 && y==n-1){
        ans.push_back(path);
        return;
    }
    visited[x][y]=1;
    // down 
    if(safe(x+1, y, arr, visited, n)){
        solve(x+1, y, arr, n, ans, visited, path+'D');
    }
    // left
    if(safe(x, y-1, arr, visited, n)){
        solve(x, y-1, arr, n, ans, visited, path+'L');
    }
    // right
    if(safe(x, y+1, arr, visited, n)){
        solve(x, y+1, arr, n, ans, visited, path+'R');
    }
    // up
    if(safe(x-1, y, arr, visited, n)){
        solve(x-1, y, arr, n, ans, visited, path+'U');
    }
    visited[x][y]=0;
}

vector < string > searchMaze(vector < vector < int >> & arr, int n) {
    vector<string> ans;
    vector<vector<bool>> visited (n, vector<bool>(n,0));
    string path="";

    if(arr[0][0]==0){
        return ans;
    }
    solve(0, 0, arr, n, ans, visited, path);
    return ans;
}
